// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: chat/channel_v2/channel.proto

package channel_v2

import (
	message_v2 "github.com/GetStream/stream-services/protobuf/chat/message_v2"
	user_v2 "github.com/GetStream/stream-services/protobuf/chat/user_v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Channel represents core channel entity
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The uniquely identifies a channel inside channel type. Channel type and
	// channel ID form channel CID in format <type>:<id>.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The channel type that this channel refers to. Channel type and channel
	// ID form channel CID in format <type>:<id>.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// created_by_id is an ID of the User who created the channel. Ownership
	// of the channel usually grants additional perimssions to the channel.
	// It's important to note that channel owner is not necessarily a channel
	// member. All channel members have to be added explicitly.
	CreatedById string `protobuf:"bytes,3,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// Whether the channel is disabled.
	Disabled bool `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// team is a team name that this channel belongs to. Only used for multi-tenant
	// applications. If empty, channel belongs to "empty" team.
	Team string `protobuf:"bytes,5,opt,name=team,proto3" json:"team,omitempty"`
	// Contains core channel settings
	Settings *ChannelSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// Contains channel summary statistics that are subject of the frequent change.
	Stats *ChannelStats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Contains channel translation settings.
	Translation *ChannelTranslation `protobuf:"bytes,8,opt,name=translation,proto3" json:"translation,omitempty"`
	// Contains channel truncation information. If empty - channel was never truncated
	Truncated *ChannelTruncationStatus `protobuf:"bytes,9,opt,name=truncated,proto3" json:"truncated,omitempty"`
	// Contains the list of commands that the channel supports.
	Commands []*ChannelCommand `protobuf:"bytes,10,rep,name=commands,proto3" json:"commands,omitempty"`
	// custom is a JSON object which contains any channel data. This data can be
	// used for sorting, filtering and data organization.
	CustomJson []byte `protobuf:"bytes,11,opt,name=custom_json,json=customJson,proto3" json:"custom_json,omitempty"`
	// The timestamp of channel creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The timestamp of last channel update.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The timestamp of channel deletion. If it's empty - channel is not
	// deleted. Otherwise, channel was soft-deleted.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{0}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Channel) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Channel) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Channel) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *Channel) GetSettings() *ChannelSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Channel) GetStats() *ChannelStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Channel) GetTranslation() *ChannelTranslation {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *Channel) GetTruncated() *ChannelTruncationStatus {
	if x != nil {
		return x.Truncated
	}
	return nil
}

func (x *Channel) GetCommands() []*ChannelCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Channel) GetCustomJson() []byte {
	if x != nil {
		return x.CustomJson
	}
	return nil
}

func (x *Channel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Channel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Channel) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// Contains core channel settings.
type ChannelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the channel is frozen. It's not possible to send new messages
	// and reaction to the frozen channel.
	Frozen bool `protobuf:"varint,1,opt,name=frozen,proto3" json:"frozen,omitempty"`
	// A number of seconds that should pass between messages of the single
	// user. It is used to implement "slow mode" feature.
	Cooldown int64 `protobuf:"varint,2,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	// Maximum length of a message (number of unicode characters).
	MaxMessageLength int64 `protobuf:"varint,3,opt,name=max_message_length,json=maxMessageLength,proto3" json:"max_message_length,omitempty"`
}

func (x *ChannelSettings) Reset() {
	*x = ChannelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSettings) ProtoMessage() {}

func (x *ChannelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSettings.ProtoReflect.Descriptor instead.
func (*ChannelSettings) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelSettings) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

func (x *ChannelSettings) GetCooldown() int64 {
	if x != nil {
		return x.Cooldown
	}
	return 0
}

func (x *ChannelSettings) GetMaxMessageLength() int64 {
	if x != nil {
		return x.MaxMessageLength
	}
	return 0
}

// Contains channel translation settings.
type ChannelTranslation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If Stream should automatically translate messages.
	AutoTranslationEnabled bool `protobuf:"varint,1,opt,name=auto_translation_enabled,json=autoTranslationEnabled,proto3" json:"auto_translation_enabled,omitempty"`
	// The language code of the translation.
	AutoTranslationLanguage string `protobuf:"bytes,2,opt,name=auto_translation_language,json=autoTranslationLanguage,proto3" json:"auto_translation_language,omitempty"`
}

func (x *ChannelTranslation) Reset() {
	*x = ChannelTranslation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTranslation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTranslation) ProtoMessage() {}

func (x *ChannelTranslation) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTranslation.ProtoReflect.Descriptor instead.
func (*ChannelTranslation) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelTranslation) GetAutoTranslationEnabled() bool {
	if x != nil {
		return x.AutoTranslationEnabled
	}
	return false
}

func (x *ChannelTranslation) GetAutoTranslationLanguage() string {
	if x != nil {
		return x.AutoTranslationLanguage
	}
	return ""
}

// Contains channel summary statistics that are subject of the frequent change.
type ChannelStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of members that are in the channel. This field is eventually
	// consistent for channels with high number of members
	MemberCount int64 `protobuf:"varint,1,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	// A timestamp of the last message sent to the channel. This field is
	// eventually consistent for channels with very high message rates
	LastMessageAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_message_at,json=lastMessageAt,proto3" json:"last_message_at,omitempty"`
}

func (x *ChannelStats) Reset() {
	*x = ChannelStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStats) ProtoMessage() {}

func (x *ChannelStats) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStats.ProtoReflect.Descriptor instead.
func (*ChannelStats) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelStats) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *ChannelStats) GetLastMessageAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMessageAt
	}
	return nil
}

// Contains channel truncation information.
type ChannelTruncationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A date of channel truncation. Chat history is only available starting
	// from this date.
	TruncatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=truncated_at,json=truncatedAt,proto3" json:"truncated_at,omitempty"`
	// ID of the user who truncated the channel. If it's empty, the channel
	// was truncated using server-side request.
	TruncatedById string `protobuf:"bytes,2,opt,name=truncated_by_id,json=truncatedById,proto3" json:"truncated_by_id,omitempty"`
}

func (x *ChannelTruncationStatus) Reset() {
	*x = ChannelTruncationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTruncationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTruncationStatus) ProtoMessage() {}

func (x *ChannelTruncationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTruncationStatus.ProtoReflect.Descriptor instead.
func (*ChannelTruncationStatus) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelTruncationStatus) GetTruncatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TruncatedAt
	}
	return nil
}

func (x *ChannelTruncationStatus) GetTruncatedById() string {
	if x != nil {
		return x.TruncatedById
	}
	return ""
}

// A view that represents channel and core entities surrounding it.
type ChannelView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains core channel information.
	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Creator of the channel.
	CreatedBy *user_v2.User `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Channel members. Only fist 100 members are provided in this field.
	Members []*ChannelMemberView `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	// Latest channel messages sorted ascendingly by the creation date.
	// The number of messages in
	Messages []*message_v2.MessageView `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ChannelView) Reset() {
	*x = ChannelView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelView) ProtoMessage() {}

func (x *ChannelView) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelView.ProtoReflect.Descriptor instead.
func (*ChannelView) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelView) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ChannelView) GetCreatedBy() *user_v2.User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ChannelView) GetMembers() []*ChannelMemberView {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ChannelView) GetMessages() []*message_v2.MessageView {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Represents user's membership inside the channel.
type ChannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID the this channel member represents.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// User's role in the channel.
	ChannelRole string `protobuf:"bytes,2,opt,name=channel_role,json=channelRole,proto3" json:"channel_role,omitempty"`
	// Contains invitation information. If it's not provided channel
	// member was not invited, but added directly.
	Invitation *ChannelMemberInvitation `protobuf:"bytes,3,opt,name=invitation,proto3" json:"invitation,omitempty"`
	// Contains ban information. If it's not provided channel member
	// is not banned.
	Ban *ChannelMemberBan `protobuf:"bytes,4,opt,name=ban,proto3" json:"ban,omitempty"`
	// Date of channel member creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Date of last channel member update.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ChannelMember) Reset() {
	*x = ChannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMember) ProtoMessage() {}

func (x *ChannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMember.ProtoReflect.Descriptor instead.
func (*ChannelMember) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChannelMember) GetChannelRole() string {
	if x != nil {
		return x.ChannelRole
	}
	return ""
}

func (x *ChannelMember) GetInvitation() *ChannelMemberInvitation {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *ChannelMember) GetBan() *ChannelMemberBan {
	if x != nil {
		return x.Ban
	}
	return nil
}

func (x *ChannelMember) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChannelMember) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// A view of ChannelMember that contains extra information.
type ChannelMemberView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelMember that this view is for.
	ChannelMember *ChannelMember `protobuf:"bytes,1,opt,name=channel_member,json=channelMember,proto3" json:"channel_member,omitempty"`
	// A view which contains user information.
	User *user_v2.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ChannelMemberView) Reset() {
	*x = ChannelMemberView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMemberView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMemberView) ProtoMessage() {}

func (x *ChannelMemberView) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMemberView.ProtoReflect.Descriptor instead.
func (*ChannelMemberView) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelMemberView) GetChannelMember() *ChannelMember {
	if x != nil {
		return x.ChannelMember
	}
	return nil
}

func (x *ChannelMemberView) GetUser() *user_v2.User {
	if x != nil {
		return x.User
	}
	return nil
}

// Contains channel member invitation data.
type ChannelMemberInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the date of invitation acception. If it's empty,
	// the invitation was not accepted.
	AcceptedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	// Contains the date of invitation rejection. If it's empty,
	// the invitation was not rejected.
	RejectedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=rejected_at,json=rejectedAt,proto3" json:"rejected_at,omitempty"`
}

func (x *ChannelMemberInvitation) Reset() {
	*x = ChannelMemberInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMemberInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMemberInvitation) ProtoMessage() {}

func (x *ChannelMemberInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMemberInvitation.ProtoReflect.Descriptor instead.
func (*ChannelMemberInvitation) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelMemberInvitation) GetAcceptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

func (x *ChannelMemberInvitation) GetRejectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RejectedAt
	}
	return nil
}

// Contains channel member ban information.
type ChannelMemberBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expiration date of the ban.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Whether the channel member was shadow banned.
	Shadow bool `protobuf:"varint,2,opt,name=shadow,proto3" json:"shadow,omitempty"`
}

func (x *ChannelMemberBan) Reset() {
	*x = ChannelMemberBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMemberBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMemberBan) ProtoMessage() {}

func (x *ChannelMemberBan) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMemberBan.ProtoReflect.Descriptor instead.
func (*ChannelMemberBan) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelMemberBan) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *ChannelMemberBan) GetShadow() bool {
	if x != nil {
		return x.Shadow
	}
	return false
}

// ChannelIdentifier identifies channel with either type and ID pair or type + list of members
type ChannelIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Channel ID
	// Either id or member_ids should be used, not both
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// List of channel members (for distinct channels).
	// Either id or member_ids should be used, not both
	MemberIds []string `protobuf:"bytes,3,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *ChannelIdentifier) Reset() {
	*x = ChannelIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdentifier) ProtoMessage() {}

func (x *ChannelIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdentifier.ProtoReflect.Descriptor instead.
func (*ChannelIdentifier) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelIdentifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChannelIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelIdentifier) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

// Contains information about the command.
type ChannelCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique command name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description, shown in commands auto-completion.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Arguments help text, shown in commands auto-completion.
	Args string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	// Set name used for grouping commands.
	Set string `protobuf:"bytes,4,opt,name=set,proto3" json:"set,omitempty"`
	// Date of command creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Date of last command update.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ChannelCommand) Reset() {
	*x = ChannelCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_channel_v2_channel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCommand) ProtoMessage() {}

func (x *ChannelCommand) ProtoReflect() protoreflect.Message {
	mi := &file_chat_channel_v2_channel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCommand.ProtoReflect.Descriptor instead.
func (*ChannelCommand) Descriptor() ([]byte, []int) {
	return file_chat_channel_v2_channel_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelCommand) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *ChannelCommand) GetSet() string {
	if x != nil {
		return x.Set
	}
	return ""
}

func (x *ChannelCommand) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChannelCommand) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_chat_channel_v2_channel_proto protoreflect.FileDescriptor

var file_chat_channel_v2_channel_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76,
	0x32, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x1a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb5, 0x05, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8a, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xce, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x65, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x22, 0x56, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x4a, 0x5a,
	0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x3b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chat_channel_v2_channel_proto_rawDescOnce sync.Once
	file_chat_channel_v2_channel_proto_rawDescData = file_chat_channel_v2_channel_proto_rawDesc
)

func file_chat_channel_v2_channel_proto_rawDescGZIP() []byte {
	file_chat_channel_v2_channel_proto_rawDescOnce.Do(func() {
		file_chat_channel_v2_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_channel_v2_channel_proto_rawDescData)
	})
	return file_chat_channel_v2_channel_proto_rawDescData
}

var file_chat_channel_v2_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chat_channel_v2_channel_proto_goTypes = []interface{}{
	(*Channel)(nil),                 // 0: stream.chat.channel_v2.Channel
	(*ChannelSettings)(nil),         // 1: stream.chat.channel_v2.ChannelSettings
	(*ChannelTranslation)(nil),      // 2: stream.chat.channel_v2.ChannelTranslation
	(*ChannelStats)(nil),            // 3: stream.chat.channel_v2.ChannelStats
	(*ChannelTruncationStatus)(nil), // 4: stream.chat.channel_v2.ChannelTruncationStatus
	(*ChannelView)(nil),             // 5: stream.chat.channel_v2.ChannelView
	(*ChannelMember)(nil),           // 6: stream.chat.channel_v2.ChannelMember
	(*ChannelMemberView)(nil),       // 7: stream.chat.channel_v2.ChannelMemberView
	(*ChannelMemberInvitation)(nil), // 8: stream.chat.channel_v2.ChannelMemberInvitation
	(*ChannelMemberBan)(nil),        // 9: stream.chat.channel_v2.ChannelMemberBan
	(*ChannelIdentifier)(nil),       // 10: stream.chat.channel_v2.ChannelIdentifier
	(*ChannelCommand)(nil),          // 11: stream.chat.channel_v2.ChannelCommand
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
	(*user_v2.User)(nil),            // 13: stream.chat.user_v2.User
	(*message_v2.MessageView)(nil),  // 14: stream.chat.message_v2.MessageView
}
var file_chat_channel_v2_channel_proto_depIdxs = []int32{
	1,  // 0: stream.chat.channel_v2.Channel.settings:type_name -> stream.chat.channel_v2.ChannelSettings
	3,  // 1: stream.chat.channel_v2.Channel.stats:type_name -> stream.chat.channel_v2.ChannelStats
	2,  // 2: stream.chat.channel_v2.Channel.translation:type_name -> stream.chat.channel_v2.ChannelTranslation
	4,  // 3: stream.chat.channel_v2.Channel.truncated:type_name -> stream.chat.channel_v2.ChannelTruncationStatus
	11, // 4: stream.chat.channel_v2.Channel.commands:type_name -> stream.chat.channel_v2.ChannelCommand
	12, // 5: stream.chat.channel_v2.Channel.created_at:type_name -> google.protobuf.Timestamp
	12, // 6: stream.chat.channel_v2.Channel.updated_at:type_name -> google.protobuf.Timestamp
	12, // 7: stream.chat.channel_v2.Channel.deleted_at:type_name -> google.protobuf.Timestamp
	12, // 8: stream.chat.channel_v2.ChannelStats.last_message_at:type_name -> google.protobuf.Timestamp
	12, // 9: stream.chat.channel_v2.ChannelTruncationStatus.truncated_at:type_name -> google.protobuf.Timestamp
	0,  // 10: stream.chat.channel_v2.ChannelView.channel:type_name -> stream.chat.channel_v2.Channel
	13, // 11: stream.chat.channel_v2.ChannelView.created_by:type_name -> stream.chat.user_v2.User
	7,  // 12: stream.chat.channel_v2.ChannelView.members:type_name -> stream.chat.channel_v2.ChannelMemberView
	14, // 13: stream.chat.channel_v2.ChannelView.messages:type_name -> stream.chat.message_v2.MessageView
	8,  // 14: stream.chat.channel_v2.ChannelMember.invitation:type_name -> stream.chat.channel_v2.ChannelMemberInvitation
	9,  // 15: stream.chat.channel_v2.ChannelMember.ban:type_name -> stream.chat.channel_v2.ChannelMemberBan
	12, // 16: stream.chat.channel_v2.ChannelMember.created_at:type_name -> google.protobuf.Timestamp
	12, // 17: stream.chat.channel_v2.ChannelMember.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 18: stream.chat.channel_v2.ChannelMemberView.channel_member:type_name -> stream.chat.channel_v2.ChannelMember
	13, // 19: stream.chat.channel_v2.ChannelMemberView.user:type_name -> stream.chat.user_v2.User
	12, // 20: stream.chat.channel_v2.ChannelMemberInvitation.accepted_at:type_name -> google.protobuf.Timestamp
	12, // 21: stream.chat.channel_v2.ChannelMemberInvitation.rejected_at:type_name -> google.protobuf.Timestamp
	12, // 22: stream.chat.channel_v2.ChannelMemberBan.expires_at:type_name -> google.protobuf.Timestamp
	12, // 23: stream.chat.channel_v2.ChannelCommand.created_at:type_name -> google.protobuf.Timestamp
	12, // 24: stream.chat.channel_v2.ChannelCommand.updated_at:type_name -> google.protobuf.Timestamp
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_chat_channel_v2_channel_proto_init() }
func file_chat_channel_v2_channel_proto_init() {
	if File_chat_channel_v2_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_channel_v2_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTranslation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTruncationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMemberView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMemberInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMemberBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_channel_v2_channel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_channel_v2_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_channel_v2_channel_proto_goTypes,
		DependencyIndexes: file_chat_channel_v2_channel_proto_depIdxs,
		MessageInfos:      file_chat_channel_v2_channel_proto_msgTypes,
	}.Build()
	File_chat_channel_v2_channel_proto = out.File
	file_chat_channel_v2_channel_proto_rawDesc = nil
	file_chat_channel_v2_channel_proto_goTypes = nil
	file_chat_channel_v2_channel_proto_depIdxs = nil
}
