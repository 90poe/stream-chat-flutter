syntax = "proto3";

package stream.chat.message_v2;

import "google/protobuf/timestamp.proto";
import "user_v2/user.proto";
import "reaction_v2/reaction.proto";

option go_package = "github.com/GetStream/stream-services/protobuf/chat/message_v2;message_v2";

// Message is a chat message that is sent to a channel
message Message {
  // Unique identifier of the message
  string id = 1;
  // The channel CID of the channel the message was sent to
  string channel_cid = 2;
  // The type of the message
  MessageType type = 3;
  // The ID of the user who sent the message
  string user_id = 4;
  // The text of the message
  string text = 5;
  // The messaging markup language for the message
  string mml = 6;
  // The HTML content of the message
  string html = 7;
  // A map that contains message text translations into various languages
  // map key is a language name
  // map value is a text translation
  map<string, string> i18n = 8;
  // JSON object which contains any user data
  bytes custom_json = 9;
  repeated MessageAttachment attachments = 10;
  // The name of a command used in the message
  string command_name = 11;
  // The message creation timestamp
  google.protobuf.Timestamp created_at = 12;
  // The message update timestamp
  google.protobuf.Timestamp updated_at = 13;
  // The message deletion timestamp
  google.protobuf.Timestamp deleted_at = 14;
  // The ID of a parent message, if this message is in a thread
  string parent_message_id = 15;
  // Whether to show this message in the channel, if this message is in a thread
  bool show_in_channel = 16;
  // The number of replies to this message
  int64 reply_count = 17;
  // The ID of a message that this message quotes
  string quoted_message_id = 18;
  // Whether the message is silent
  bool silent = 19;
  // Contains message pin info. If empty - message is not pinned
  MessagePin pinned = 20;
  // The user IDs of the users that replied to this message
  repeated string thread_participant_user_ids = 21;
  // The user IDs of users that were mentioned in this message
  repeated string mentioned_user_ids = 22;
  // A map with number of reactions of each type
  // map key is a reaction type
  map<string, int64> reaction_counts = 23;
  // A map with sum of reaction scores of each type
  // map key is a reaction type
  map<string, int64> reaction_scores = 24;
}

// Contains message pin info
message MessagePin {
  // When the message was pinned
  google.protobuf.Timestamp pinned_at = 20;
  // When the pin for this message expires
  google.protobuf.Timestamp pin_expires_at = 21;
  // The user ID of the user that pinned this message
  string pinned_by_user_id = 22;
}

// A view of a message that contains additional info
message MessageView {
  // The message
  stream.chat.message_v2.Message message = 1;
  // Message sender object
  stream.chat.user_v2.User user = 2;
  // Object containing parent message view. Empty if there's no parent message
  stream.chat.message_v2.MessageView parent_message = 3;
  // Object containing quoted message. Empty if there's no quoted message
  // MessageView that provided here will not contain quoted message
  stream.chat.message_v2.MessageView quoted_message = 4;
  // List of users who replied to this message
  repeated stream.chat.user_v2.User thread_participants = 5;
  // List of users that were mentioned in this message
  repeated stream.chat.user_v2.User mentioned_users = 6;
  // A map with 5 latest reactions of each type
  // map key is a reaction type
  map<string, stream.chat.reaction_v2.ReactionViews> latest_reactions = 7;
}

// A collection of messages
message Messages {
  // The messages
  repeated stream.chat.message_v2.Message messages = 1;
}

// The type of the message
enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  // A regular message
  MESSAGE_TYPE_REGULAR = 1;
  // A temporary message which is only delivered to one user
  MESSAGE_TYPE_EPHEMERAL = 2;
  // An error message which occurs as the result of a failed command
  MESSAGE_TYPE_ERROR = 3;
  // A reply in a thread
  MESSAGE_TYPE_REPLY = 4;
  // A message generated by a system event
  MESSAGE_TYPE_SYSTEM = 5;
  // A soft deleted message
  MESSAGE_TYPE_DELETED = 6;
}

// Attachment that can be added to the message
message MessageAttachment {
  // Type of the attachment. Can be any string.
  // TODO: should we lock this down with enum/oneof to keep in sync with SDKs? We have custom data in messages if someone needs to get creative
  // Examples: image, video, audio, text
  string type = 1;

  // TODO: attachment fields
}

// TODO ===================================================
// ========================================================
// ========================================================
// ========================================================
// ========================================================


message MessageInput {
  // Unique identifier of the message. The server will generate an ID if it is not set. The server will generate an ID if it is not set
  string id = 1;
  // The channel CID of the channel the message was sent to
  string channel_cid = 3;
  // The text of the message
  string text = 4;

  // The ID of a parent message, if this message is in a thread
  string parent_message_id = 5;
  // Whether to show this message in the channel, if this message is in a thread
  bool show_in_channel = 6;

  // The ID of a message that this message quotes
  string quoted_message_id = 7;

  // Whether to show this message in the channel, if this message is in a thread
  bool pinned = 8;
  // When the message was pinned
  google.protobuf.Timestamp pinned_at = 9;
  // When the pin for this message expires
  google.protobuf.Timestamp pin_expires_at = 10;

  // Whether the message is silent
  bool silent = 11;
}

// An input to send a message from a client side request
message MessageSendClientSideView {
  // Unique identifier of the message. The server will generate an ID if it is not set. The server will generate an ID if it is not set
  string id = 1;
  // The channel CID of the channel the message was sent to
  string channel_cid = 3;
  // The text of the message
  string text = 4;

  // The ID of a parent message, if this message is in a thread
  string parent_message_id = 5;
  // Whether to show this message in the channel, if this message is in a thread
  bool show_in_channel = 6;

  // The ID of a message that this message quotes
  string quoted_message_id = 7;

  // Whether to show this message in the channel, if this message is in a thread
  bool pinned = 8;
  // When the message was pinned
  google.protobuf.Timestamp pinned_at = 9;
  // When the pin for this message expires
  google.protobuf.Timestamp pin_expires_at = 10;

  // Whether the message is silent
  bool silent = 11;
}

// An input to send a message from a server side request
message MessageSendServerSideView {
  // The message fields
  MessageSendClientSideView message = 1;
  // The messaging markup language content for the message
  string mml = 2;
  // The ID of the user who sent the message
  string user_id = 3;
}

// A request to send a message to a channel
message SendMessageRequest {
  // The input message
  oneof message {
    MessageSendClientSideView client_side_message = 1;
    MessageSendServerSideView server_side_message = 2;
  }
  // Whether to skip push notifications for this message
  bool skip_push = 3;
  // Whether to skip enriching any urls present in this message
  bool skip_enrich_url = 4;
}

// A response from sending a message
message SendMessageResponse {
  // The content of the response
  Message message = 1;
}

// A request to get a message by ID
message GetMessageRequest {
  // The channel CID of the channel the message is in
  string channel_cid = 1;
  // The ID of the message
  string message_id = 2;
}

// A response from getting a message
message GetMessageResponse {
  // The content of the response
  Message message = 1;
}

// A request to get many messages by ID
message GetMessagesRequest {
  // The ID of the messages
  repeated string message_ids = 1;
  // The channel CID of the channel the messages are in
  string channel_cid = 2;
}

// A response from getting messages
message GetMessagesResponse {
  // The content of the response
  Messages messages = 1;
}

// A request to delete a message by ID
message DeleteMessageRequest {
  // The ID of the message
  string message_id = 1;
  // The channel CID of the channel the message is in
  string channel_cid = 2;
  // Whether to hard delete the message
  bool hard = 3;
}

// A response from deleting a message
message DeleteMessageResponse {
  // The content of the response
  Messages messages = 1;
}

// A request to update a message
message UpdateMessageRequest {
  // Whether to skip enriching any urls present in this message
  bool skip_enrich_url = 4;
}

// A response from updating a message
message UpdateMessageResponse {
  // The content of the response
  Messages messages = 1;
}

// A request to pin a message
message PinMessageRequest {
  // The ID of the message
  string message_id = 1;
  // The channel CID of the channel the message was sent to
  string channel_cid = 2;
  // When the message was pinned. If empty, the server will populate this field
  google.protobuf.Timestamp pinned_at = 3;
  // When the pin for this message expires
  google.protobuf.Timestamp pin_expires_at = 4;
}

// A response from pinning a message
message PinMessageResponse {
  // The content of the response
  Messages messages = 1;
}

// A request to unpin a message
message UnpinMessageRequest {
  // The ID of the message
  string message_id = 1;
  // The channel CID of the channel the message was sent to
  string channel_cid = 2;
}

// A response from unpinning a message
message UnpinMessageResponse {
  // The content of the response
  Messages messages = 1;
}
