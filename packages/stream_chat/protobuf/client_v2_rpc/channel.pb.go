// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: chat/client_v2_rpc/channel.proto

package client_v2_rpc

import (
	channel_v2 "github.com/GetStream/stream-services/protobuf/chat/channel_v2"
	utils_v2 "github.com/GetStream/stream-services/protobuf/chat/utils_v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChannelCapability is a enum containing all known channel capabilities.
// Each capability takes into account user permissions and features that channel supports
type ChannelCapability int32

const (
	// Capability is unspecified.
	ChannelCapability_CHANNEL_CAPABILITY_UNSPECIFIED ChannelCapability = 0
	// Capability to send messages.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_MESSAGE ChannelCapability = 1
	// Capability to send replies.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_REPLY ChannelCapability = 2
	// Capability to send reactions.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_REACTION ChannelCapability = 3
	// Capability to send links.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_LINKS ChannelCapability = 4
	// Capability to freeze channel.
	ChannelCapability_CHANNEL_CAPABILITY_FREEZE_CHANNEL ChannelCapability = 5
	// Capability to modify channel cooldown.
	ChannelCapability_CHANNEL_CAPABILITY_SET_CHANNEL_COOLDOWN ChannelCapability = 6
	// Capability to leave the channel.
	ChannelCapability_CHANNEL_CAPABILITY_LEAVE_CHANNEL ChannelCapability = 7
	// Capability to join the channel.
	ChannelCapability_CHANNEL_CAPABILITY_JOIN_CHANNEL ChannelCapability = 8
	// Capability to pin a message.
	ChannelCapability_CHANNEL_CAPABILITY_PIN_MESSAGE ChannelCapability = 9
	// Capability to delete any messages.
	ChannelCapability_CHANNEL_CAPABILITY_DELETE_ANY_MESSAGE ChannelCapability = 10
	// Capability to delete own messages.
	ChannelCapability_CHANNEL_CAPABILITY_DELETE_OWN_MESSAGE ChannelCapability = 11
	// Capability to update any messages.
	ChannelCapability_CHANNEL_CAPABILITY_UPDATE_ANY_MESSAGE ChannelCapability = 12
	// Capability to update own messages.
	ChannelCapability_CHANNEL_CAPABILITY_UPDATE_OWN_MESSAGE ChannelCapability = 13
	// Capability to search messages.
	ChannelCapability_CHANNEL_CAPABILITY_SEARCH_MESSAGES ChannelCapability = 14
	// Capability to search messages.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_TYPING_EVENTS ChannelCapability = 15
	// Capability to upload a file
	ChannelCapability_CHANNEL_CAPABILITY_UPLOAD_FILE ChannelCapability = 16
	// Capability to delete the channel.
	ChannelCapability_CHANNEL_CAPABILITY_DELETE_CHANNEL ChannelCapability = 17
	// Capability to update the channel.
	ChannelCapability_CHANNEL_CAPABILITY_UPDATE_CHANNEL ChannelCapability = 18
	// Capability to update the channel members.
	ChannelCapability_CHANNEL_CAPABILITY_UPDATE_CHANNEL_MEMBERS ChannelCapability = 19
	// Capability to quote messages.
	ChannelCapability_CHANNEL_CAPABILITY_QUOTE_MESSAGE ChannelCapability = 20
	// Capability to ban channel members.
	ChannelCapability_CHANNEL_CAPABILITY_BAN_CHANNEL_MEMBERS ChannelCapability = 21
	// Capability to flag messages.
	ChannelCapability_CHANNEL_CAPABILITY_FLAG_MESSAGE ChannelCapability = 22
	// Capability to mute channel.
	ChannelCapability_CHANNEL_CAPABILITY_MUTE_CHANNEL ChannelCapability = 23
	// Capability to populate `custom` event.
	ChannelCapability_CHANNEL_CAPABILITY_SEND_CUSTOM_EVENTS ChannelCapability = 24
	// Capability to populate `read` event.
	ChannelCapability_CHANNEL_CAPABILITY_READ_EVENTS ChannelCapability = 25
	// Capability to populate `connect` event.
	ChannelCapability_CHANNEL_CAPABILITY_CONNECT_EVENTS ChannelCapability = 26
	// Capability to populate `typing` event.
	ChannelCapability_CHANNEL_CAPABILITY_TYPING_EVENTS ChannelCapability = 27
	// Capability to modify slow mode.
	ChannelCapability_CHANNEL_CAPABILITY_SLOW_MODE ChannelCapability = 28
	// Capability to join a call.
	ChannelCapability_CHANNEL_CAPABILITY_JOIN_CALL ChannelCapability = 29
	// Capability to create a call.
	ChannelCapability_CHANNEL_CAPABILITY_CREATE_CALL ChannelCapability = 30
)

// Enum value maps for ChannelCapability.
var (
	ChannelCapability_name = map[int32]string{
		0:  "CHANNEL_CAPABILITY_UNSPECIFIED",
		1:  "CHANNEL_CAPABILITY_SEND_MESSAGE",
		2:  "CHANNEL_CAPABILITY_SEND_REPLY",
		3:  "CHANNEL_CAPABILITY_SEND_REACTION",
		4:  "CHANNEL_CAPABILITY_SEND_LINKS",
		5:  "CHANNEL_CAPABILITY_FREEZE_CHANNEL",
		6:  "CHANNEL_CAPABILITY_SET_CHANNEL_COOLDOWN",
		7:  "CHANNEL_CAPABILITY_LEAVE_CHANNEL",
		8:  "CHANNEL_CAPABILITY_JOIN_CHANNEL",
		9:  "CHANNEL_CAPABILITY_PIN_MESSAGE",
		10: "CHANNEL_CAPABILITY_DELETE_ANY_MESSAGE",
		11: "CHANNEL_CAPABILITY_DELETE_OWN_MESSAGE",
		12: "CHANNEL_CAPABILITY_UPDATE_ANY_MESSAGE",
		13: "CHANNEL_CAPABILITY_UPDATE_OWN_MESSAGE",
		14: "CHANNEL_CAPABILITY_SEARCH_MESSAGES",
		15: "CHANNEL_CAPABILITY_SEND_TYPING_EVENTS",
		16: "CHANNEL_CAPABILITY_UPLOAD_FILE",
		17: "CHANNEL_CAPABILITY_DELETE_CHANNEL",
		18: "CHANNEL_CAPABILITY_UPDATE_CHANNEL",
		19: "CHANNEL_CAPABILITY_UPDATE_CHANNEL_MEMBERS",
		20: "CHANNEL_CAPABILITY_QUOTE_MESSAGE",
		21: "CHANNEL_CAPABILITY_BAN_CHANNEL_MEMBERS",
		22: "CHANNEL_CAPABILITY_FLAG_MESSAGE",
		23: "CHANNEL_CAPABILITY_MUTE_CHANNEL",
		24: "CHANNEL_CAPABILITY_SEND_CUSTOM_EVENTS",
		25: "CHANNEL_CAPABILITY_READ_EVENTS",
		26: "CHANNEL_CAPABILITY_CONNECT_EVENTS",
		27: "CHANNEL_CAPABILITY_TYPING_EVENTS",
		28: "CHANNEL_CAPABILITY_SLOW_MODE",
		29: "CHANNEL_CAPABILITY_JOIN_CALL",
		30: "CHANNEL_CAPABILITY_CREATE_CALL",
	}
	ChannelCapability_value = map[string]int32{
		"CHANNEL_CAPABILITY_UNSPECIFIED":            0,
		"CHANNEL_CAPABILITY_SEND_MESSAGE":           1,
		"CHANNEL_CAPABILITY_SEND_REPLY":             2,
		"CHANNEL_CAPABILITY_SEND_REACTION":          3,
		"CHANNEL_CAPABILITY_SEND_LINKS":             4,
		"CHANNEL_CAPABILITY_FREEZE_CHANNEL":         5,
		"CHANNEL_CAPABILITY_SET_CHANNEL_COOLDOWN":   6,
		"CHANNEL_CAPABILITY_LEAVE_CHANNEL":          7,
		"CHANNEL_CAPABILITY_JOIN_CHANNEL":           8,
		"CHANNEL_CAPABILITY_PIN_MESSAGE":            9,
		"CHANNEL_CAPABILITY_DELETE_ANY_MESSAGE":     10,
		"CHANNEL_CAPABILITY_DELETE_OWN_MESSAGE":     11,
		"CHANNEL_CAPABILITY_UPDATE_ANY_MESSAGE":     12,
		"CHANNEL_CAPABILITY_UPDATE_OWN_MESSAGE":     13,
		"CHANNEL_CAPABILITY_SEARCH_MESSAGES":        14,
		"CHANNEL_CAPABILITY_SEND_TYPING_EVENTS":     15,
		"CHANNEL_CAPABILITY_UPLOAD_FILE":            16,
		"CHANNEL_CAPABILITY_DELETE_CHANNEL":         17,
		"CHANNEL_CAPABILITY_UPDATE_CHANNEL":         18,
		"CHANNEL_CAPABILITY_UPDATE_CHANNEL_MEMBERS": 19,
		"CHANNEL_CAPABILITY_QUOTE_MESSAGE":          20,
		"CHANNEL_CAPABILITY_BAN_CHANNEL_MEMBERS":    21,
		"CHANNEL_CAPABILITY_FLAG_MESSAGE":           22,
		"CHANNEL_CAPABILITY_MUTE_CHANNEL":           23,
		"CHANNEL_CAPABILITY_SEND_CUSTOM_EVENTS":     24,
		"CHANNEL_CAPABILITY_READ_EVENTS":            25,
		"CHANNEL_CAPABILITY_CONNECT_EVENTS":         26,
		"CHANNEL_CAPABILITY_TYPING_EVENTS":          27,
		"CHANNEL_CAPABILITY_SLOW_MODE":              28,
		"CHANNEL_CAPABILITY_JOIN_CALL":              29,
		"CHANNEL_CAPABILITY_CREATE_CALL":            30,
	}
)

func (x ChannelCapability) Enum() *ChannelCapability {
	p := new(ChannelCapability)
	*p = x
	return p
}

func (x ChannelCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_client_v2_rpc_channel_proto_enumTypes[0].Descriptor()
}

func (ChannelCapability) Type() protoreflect.EnumType {
	return &file_chat_client_v2_rpc_channel_proto_enumTypes[0]
}

func (x ChannelCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelCapability.Descriptor instead.
func (ChannelCapability) EnumDescriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{0}
}

// A view which User gets when they request a channel
type ChannelUserView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains base channel view.
	ChannelView *channel_v2.ChannelView `protobuf:"bytes,1,opt,name=channel_view,json=channelView,proto3" json:"channel_view,omitempty"`
	// Contains user settings for this channel.
	UserSettings *ChannelUserSettings `protobuf:"bytes,2,opt,name=user_settings,json=userSettings,proto3" json:"user_settings,omitempty"`
	// List of channel capabilities that are available to the user.
	Capabilities []ChannelCapability `protobuf:"varint,3,rep,packed,name=capabilities,proto3,enum=stream.chat.client_v2_rpc.ChannelCapability" json:"capabilities,omitempty"`
	// Contains information about the authorized user
	// on this channel.
	Membership *channel_v2.ChannelMemberView `protobuf:"bytes,4,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *ChannelUserView) Reset() {
	*x = ChannelUserView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUserView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUserView) ProtoMessage() {}

func (x *ChannelUserView) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUserView.ProtoReflect.Descriptor instead.
func (*ChannelUserView) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelUserView) GetChannelView() *channel_v2.ChannelView {
	if x != nil {
		return x.ChannelView
	}
	return nil
}

func (x *ChannelUserView) GetUserSettings() *ChannelUserSettings {
	if x != nil {
		return x.UserSettings
	}
	return nil
}

func (x *ChannelUserView) GetCapabilities() []ChannelCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ChannelUserView) GetMembership() *channel_v2.ChannelMemberView {
	if x != nil {
		return x.Membership
	}
	return nil
}

// Request to get or create a channel.
type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel identifier object.
	Identifier *channel_v2.ChannelIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{1}
}

func (x *GetChannelRequest) GetIdentifier() *channel_v2.ChannelIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// Response to get or create a channel.
type GetChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains base channel view.
	Channel *ChannelUserView `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *GetChannelResponse) Reset() {
	*x = GetChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelResponse) ProtoMessage() {}

func (x *GetChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelResponse.ProtoReflect.Descriptor instead.
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{2}
}

func (x *GetChannelResponse) GetChannel() *ChannelUserView {
	if x != nil {
		return x.Channel
	}
	return nil
}

// Contains states of the channel for the authorized user.
type ChannelUserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the channel is hidden.
	Hidden bool `protobuf:"varint,1,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Whether the channel is muted.
	Muted bool `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
	// Contains date of the mute expiration. If it's empty, mute will never expire.
	MuteExpiresAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=mute_expires_at,json=muteExpiresAt,proto3" json:"mute_expires_at,omitempty"`
}

func (x *ChannelUserSettings) Reset() {
	*x = ChannelUserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUserSettings) ProtoMessage() {}

func (x *ChannelUserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUserSettings.ProtoReflect.Descriptor instead.
func (*ChannelUserSettings) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelUserSettings) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ChannelUserSettings) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *ChannelUserSettings) GetMuteExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MuteExpiresAt
	}
	return nil
}

// Request to get the list of channels.
type QueryChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of filters in MQ format, JSON encoded
	Mq []byte `protobuf:"bytes,1,opt,name=mq,proto3" json:"mq,omitempty"`
	// Pager to perform offset based pagination. Default limit is 20 (TODO: validate)
	Pager *utils_v2.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	// Sort is used to provide sort direction. By default channels are sort by XX ASC (TODO: fill this in)
	Sort []*utils_v2.Sort `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
}

func (x *QueryChannelsRequest) Reset() {
	*x = QueryChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChannelsRequest) ProtoMessage() {}

func (x *QueryChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChannelsRequest.ProtoReflect.Descriptor instead.
func (*QueryChannelsRequest) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{4}
}

func (x *QueryChannelsRequest) GetMq() []byte {
	if x != nil {
		return x.Mq
	}
	return nil
}

func (x *QueryChannelsRequest) GetPager() *utils_v2.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *QueryChannelsRequest) GetSort() []*utils_v2.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// Request to get the list of channels.
type QueryChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of channels.
	Channels []*ChannelUserView `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *QueryChannelsResponse) Reset() {
	*x = QueryChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChannelsResponse) ProtoMessage() {}

func (x *QueryChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_client_v2_rpc_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChannelsResponse.ProtoReflect.Descriptor instead.
func (*QueryChannelsResponse) Descriptor() ([]byte, []int) {
	return file_chat_client_v2_rpc_channel_proto_rawDescGZIP(), []int{5}
}

func (x *QueryChannelsResponse) GetChannels() []*ChannelUserView {
	if x != nil {
		return x.Channels
	}
	return nil
}

var File_chat_client_v2_rpc_channel_proto protoreflect.FileDescriptor

var file_chat_client_v2_rpc_channel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32,
	0x5f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x2f, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x46, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x53, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6d,
	0x75, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x89, 0x01, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x6d, 0x71, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x5f, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2a, 0xcb, 0x09, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4f,
	0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x29, 0x0a,
	0x25, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x11, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x14, 0x12, 0x2a, 0x0a,
	0x26, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x16, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x17, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x18, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1b, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x1e, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x3b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chat_client_v2_rpc_channel_proto_rawDescOnce sync.Once
	file_chat_client_v2_rpc_channel_proto_rawDescData = file_chat_client_v2_rpc_channel_proto_rawDesc
)

func file_chat_client_v2_rpc_channel_proto_rawDescGZIP() []byte {
	file_chat_client_v2_rpc_channel_proto_rawDescOnce.Do(func() {
		file_chat_client_v2_rpc_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_client_v2_rpc_channel_proto_rawDescData)
	})
	return file_chat_client_v2_rpc_channel_proto_rawDescData
}

var file_chat_client_v2_rpc_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_client_v2_rpc_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chat_client_v2_rpc_channel_proto_goTypes = []interface{}{
	(ChannelCapability)(0),               // 0: stream.chat.client_v2_rpc.ChannelCapability
	(*ChannelUserView)(nil),              // 1: stream.chat.client_v2_rpc.ChannelUserView
	(*GetChannelRequest)(nil),            // 2: stream.chat.client_v2_rpc.GetChannelRequest
	(*GetChannelResponse)(nil),           // 3: stream.chat.client_v2_rpc.GetChannelResponse
	(*ChannelUserSettings)(nil),          // 4: stream.chat.client_v2_rpc.ChannelUserSettings
	(*QueryChannelsRequest)(nil),         // 5: stream.chat.client_v2_rpc.QueryChannelsRequest
	(*QueryChannelsResponse)(nil),        // 6: stream.chat.client_v2_rpc.QueryChannelsResponse
	(*channel_v2.ChannelView)(nil),       // 7: stream.chat.channel_v2.ChannelView
	(*channel_v2.ChannelMemberView)(nil), // 8: stream.chat.channel_v2.ChannelMemberView
	(*channel_v2.ChannelIdentifier)(nil), // 9: stream.chat.channel_v2.ChannelIdentifier
	(*timestamppb.Timestamp)(nil),        // 10: google.protobuf.Timestamp
	(*utils_v2.Pager)(nil),               // 11: stream.chat.utils_v2.Pager
	(*utils_v2.Sort)(nil),                // 12: stream.chat.utils_v2.Sort
}
var file_chat_client_v2_rpc_channel_proto_depIdxs = []int32{
	7,  // 0: stream.chat.client_v2_rpc.ChannelUserView.channel_view:type_name -> stream.chat.channel_v2.ChannelView
	4,  // 1: stream.chat.client_v2_rpc.ChannelUserView.user_settings:type_name -> stream.chat.client_v2_rpc.ChannelUserSettings
	0,  // 2: stream.chat.client_v2_rpc.ChannelUserView.capabilities:type_name -> stream.chat.client_v2_rpc.ChannelCapability
	8,  // 3: stream.chat.client_v2_rpc.ChannelUserView.membership:type_name -> stream.chat.channel_v2.ChannelMemberView
	9,  // 4: stream.chat.client_v2_rpc.GetChannelRequest.identifier:type_name -> stream.chat.channel_v2.ChannelIdentifier
	1,  // 5: stream.chat.client_v2_rpc.GetChannelResponse.channel:type_name -> stream.chat.client_v2_rpc.ChannelUserView
	10, // 6: stream.chat.client_v2_rpc.ChannelUserSettings.mute_expires_at:type_name -> google.protobuf.Timestamp
	11, // 7: stream.chat.client_v2_rpc.QueryChannelsRequest.pager:type_name -> stream.chat.utils_v2.Pager
	12, // 8: stream.chat.client_v2_rpc.QueryChannelsRequest.sort:type_name -> stream.chat.utils_v2.Sort
	1,  // 9: stream.chat.client_v2_rpc.QueryChannelsResponse.channels:type_name -> stream.chat.client_v2_rpc.ChannelUserView
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chat_client_v2_rpc_channel_proto_init() }
func file_chat_client_v2_rpc_channel_proto_init() {
	if File_chat_client_v2_rpc_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_client_v2_rpc_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUserView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_client_v2_rpc_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_client_v2_rpc_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_client_v2_rpc_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_client_v2_rpc_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_client_v2_rpc_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_client_v2_rpc_channel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_client_v2_rpc_channel_proto_goTypes,
		DependencyIndexes: file_chat_client_v2_rpc_channel_proto_depIdxs,
		EnumInfos:         file_chat_client_v2_rpc_channel_proto_enumTypes,
		MessageInfos:      file_chat_client_v2_rpc_channel_proto_msgTypes,
	}.Build()
	File_chat_client_v2_rpc_channel_proto = out.File
	file_chat_client_v2_rpc_channel_proto_rawDesc = nil
	file_chat_client_v2_rpc_channel_proto_goTypes = nil
	file_chat_client_v2_rpc_channel_proto_depIdxs = nil
}
