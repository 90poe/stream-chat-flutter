// TODO: Work in progress
//
//
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: chat/error_v2/error.proto

package error_v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	// It is unknown why the request failed.
	// Normally, It's not possible to get this error.
	// Unknown error.
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// This error carries additional metadata with fields that failed validation
	// Each failed field has both error message and error code specific to failed validator
	// Mapping:
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_VALIDATION ErrorCode = 1
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_INTERNAL ErrorCode = -1
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_ACCESS_KEY ErrorCode = 2
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_AUTH ErrorCode = 5
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_DUPLICATE_USERNAME ErrorCode = 6
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_RATELIMITED ErrorCode = 9
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_NOTFOUND ErrorCode = 16
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_NOT_ALLOWED ErrorCode = 17
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_EVENT_NOT_SUPPORTED ErrorCode = 18
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED ErrorCode = 19
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_MESSAGE_TOO_LONG ErrorCode = 20
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_MULTIPLE_NESTING_LEVEL ErrorCode = 21
	// * Twirp: ???
	// * HTTP: ???
	ErrorCode_ERROR_CODE_PAYLOAD_TOO_BIG ErrorCode = 22
	// * Twirp: unauthenticated
	// * HTTP: 401
	ErrorCode_ERROR_CODE_TOKEN_EXPIRED ErrorCode = 40
	// * Twirp: unauthenticated
	// * HTTP: 401
	ErrorCode_ERROR_CODE_TOKEN_INVALID_YET ErrorCode = 41
	// * Twirp: unauthenticated
	// * HTTP: 401
	ErrorCode_ERROR_CODE_TOKEN_USED_BEFORE_IAT ErrorCode = 42
	// * Twirp: unauthenticated
	// * HTTP: 401
	ErrorCode_ERROR_CODE_TOKEN_INVALID_SIGNATURE ErrorCode = 43
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING ErrorCode = 44
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR ErrorCode = 45
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_CONNECTION_ID_NOT_FOUND ErrorCode = 46
	// * Twirp: permission_denied
	// * HTTP: 403
	ErrorCode_ERROR_CODE_COOLDOWN_PERIOD_NOT_MET ErrorCode = 60
	// * Twirp: permission_denied
	// * HTTP: 403
	ErrorCode_ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH ErrorCode = 70
	// * Twirp: permission_denied
	// * HTTP: 403
	ErrorCode_ERROR_CODE_TOO_MANY_CONNECTIONS ErrorCode = 71
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1 ErrorCode = 72
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_MODERATION_FAILED ErrorCode = 73
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED ErrorCode = 80
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_INVALID_CALL_ID ErrorCode = 81
	// * Twirp: invalid_argument
	// * HTTP: 400
	ErrorCode_ERROR_CODE_VIDEO_CREATE_CALL_FAILED ErrorCode = 82
	// * Twirp: permission_denied
	// * HTTP: 403
	ErrorCode_ERROR_CODE_APP_SUSPENDED ErrorCode = 99
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_UNSPECIFIED",
		1:  "ERROR_CODE_VALIDATION",
		-1: "ERROR_CODE_INTERNAL",
		2:  "ERROR_CODE_ACCESS_KEY",
		5:  "ERROR_CODE_AUTH",
		6:  "ERROR_CODE_DUPLICATE_USERNAME",
		9:  "ERROR_CODE_RATELIMITED",
		16: "ERROR_CODE_NOTFOUND",
		17: "ERROR_CODE_NOT_ALLOWED",
		18: "ERROR_CODE_EVENT_NOT_SUPPORTED",
		19: "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED",
		20: "ERROR_CODE_MESSAGE_TOO_LONG",
		21: "ERROR_CODE_MULTIPLE_NESTING_LEVEL",
		22: "ERROR_CODE_PAYLOAD_TOO_BIG",
		40: "ERROR_CODE_TOKEN_EXPIRED",
		41: "ERROR_CODE_TOKEN_INVALID_YET",
		42: "ERROR_CODE_TOKEN_USED_BEFORE_IAT",
		43: "ERROR_CODE_TOKEN_INVALID_SIGNATURE",
		44: "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING",
		45: "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR",
		46: "ERROR_CODE_CONNECTION_ID_NOT_FOUND",
		60: "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET",
		70: "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH",
		71: "ERROR_CODE_TOO_MANY_CONNECTIONS",
		72: "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1",
		73: "ERROR_CODE_MODERATION_FAILED",
		80: "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED",
		81: "ERROR_CODE_INVALID_CALL_ID",
		82: "ERROR_CODE_VIDEO_CREATE_CALL_FAILED",
		99: "ERROR_CODE_APP_SUSPENDED",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                        0,
		"ERROR_CODE_VALIDATION":                         1,
		"ERROR_CODE_INTERNAL":                           -1,
		"ERROR_CODE_ACCESS_KEY":                         2,
		"ERROR_CODE_AUTH":                               5,
		"ERROR_CODE_DUPLICATE_USERNAME":                 6,
		"ERROR_CODE_RATELIMITED":                        9,
		"ERROR_CODE_NOTFOUND":                           16,
		"ERROR_CODE_NOT_ALLOWED":                        17,
		"ERROR_CODE_EVENT_NOT_SUPPORTED":                18,
		"ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED":      19,
		"ERROR_CODE_MESSAGE_TOO_LONG":                   20,
		"ERROR_CODE_MULTIPLE_NESTING_LEVEL":             21,
		"ERROR_CODE_PAYLOAD_TOO_BIG":                    22,
		"ERROR_CODE_TOKEN_EXPIRED":                      40,
		"ERROR_CODE_TOKEN_INVALID_YET":                  41,
		"ERROR_CODE_TOKEN_USED_BEFORE_IAT":              42,
		"ERROR_CODE_TOKEN_INVALID_SIGNATURE":            43,
		"ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING":    44,
		"ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR": 45,
		"ERROR_CODE_CONNECTION_ID_NOT_FOUND":            46,
		"ERROR_CODE_COOLDOWN_PERIOD_NOT_MET":            60,
		"ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH": 70,
		"ERROR_CODE_TOO_MANY_CONNECTIONS":               71,
		"ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1":           72,
		"ERROR_CODE_MODERATION_FAILED":                  73,
		"ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED":      80,
		"ERROR_CODE_INVALID_CALL_ID":                    81,
		"ERROR_CODE_VIDEO_CREATE_CALL_FAILED":           82,
		"ERROR_CODE_APP_SUSPENDED":                      99,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_error_v2_error_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_chat_error_v2_error_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_chat_error_v2_error_proto_rawDescGZIP(), []int{0}
}

type ValidationErrorCode int32

const (
	ValidationErrorCode_VALIDATION_ERROR_CODE_UNSPECIFIED ValidationErrorCode = 0
	ValidationErrorCode_VALIDATION_ERROR_CODE_REQUIRED    ValidationErrorCode = 1
)

// Enum value maps for ValidationErrorCode.
var (
	ValidationErrorCode_name = map[int32]string{
		0: "VALIDATION_ERROR_CODE_UNSPECIFIED",
		1: "VALIDATION_ERROR_CODE_REQUIRED",
	}
	ValidationErrorCode_value = map[string]int32{
		"VALIDATION_ERROR_CODE_UNSPECIFIED": 0,
		"VALIDATION_ERROR_CODE_REQUIRED":    1,
	}
)

func (x ValidationErrorCode) Enum() *ValidationErrorCode {
	p := new(ValidationErrorCode)
	*p = x
	return p
}

func (x ValidationErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_error_v2_error_proto_enumTypes[1].Descriptor()
}

func (ValidationErrorCode) Type() protoreflect.EnumType {
	return &file_chat_error_v2_error_proto_enumTypes[1]
}

func (x ValidationErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationErrorCode.Descriptor instead.
func (ValidationErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_chat_error_v2_error_proto_rawDescGZIP(), []int{1}
}

var File_chat_error_v2_error_proto protoreflect.FileDescriptor

var file_chat_error_v2_error_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76, 0x32, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76,
	0x32, 0x2a, 0xbb, 0x08, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x2c, 0x0a, 0x28, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x14, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x42, 0x49, 0x47, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x28, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x59, 0x45, 0x54, 0x10, 0x29, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f,
	0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x41, 0x54, 0x10, 0x2a, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x2b, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x2c, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2d, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2e, 0x12,
	0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x10, 0x3c, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x46, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x47, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x56, 0x31, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x49, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x50, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x51, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x52, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x63, 0x2a,
	0x60, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76, 0x32,
	0x3b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chat_error_v2_error_proto_rawDescOnce sync.Once
	file_chat_error_v2_error_proto_rawDescData = file_chat_error_v2_error_proto_rawDesc
)

func file_chat_error_v2_error_proto_rawDescGZIP() []byte {
	file_chat_error_v2_error_proto_rawDescOnce.Do(func() {
		file_chat_error_v2_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_error_v2_error_proto_rawDescData)
	})
	return file_chat_error_v2_error_proto_rawDescData
}

var file_chat_error_v2_error_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chat_error_v2_error_proto_goTypes = []interface{}{
	(ErrorCode)(0),           // 0: stream.chat.error_v2.ErrorCode
	(ValidationErrorCode)(0), // 1: stream.chat.error_v2.ValidationErrorCode
}
var file_chat_error_v2_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_error_v2_error_proto_init() }
func file_chat_error_v2_error_proto_init() {
	if File_chat_error_v2_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_error_v2_error_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_error_v2_error_proto_goTypes,
		DependencyIndexes: file_chat_error_v2_error_proto_depIdxs,
		EnumInfos:         file_chat_error_v2_error_proto_enumTypes,
	}.Build()
	File_chat_error_v2_error_proto = out.File
	file_chat_error_v2_error_proto_rawDesc = nil
	file_chat_error_v2_error_proto_goTypes = nil
	file_chat_error_v2_error_proto_depIdxs = nil
}
